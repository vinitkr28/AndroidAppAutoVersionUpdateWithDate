ext {
    mVersionName = ""
    mApkFileName = ""
    formattedDate = new Date().format('dd-MM-yyyy-HH-mm')
    getNextAppVersion()
}

def getNextAppVersion(){
    def versionPropsFile = file('version.properties')
    def value = 0
    Properties versionProps = new Properties()
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_MAJOR'] = "0"
        versionProps['VERSION_MINOR'] = "0"
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_BUILD'] = "-1"
        // I set it to minus one so the first build is 0 which isn't super important.
        versionProps['VERSION_NUMBER'] = "1"
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    def runTasks = gradle.startParameter.taskNames
    if ('assembleRelease' in runTasks) {
        value = 1
    }

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))

        versionProps['VERSION_PATCH'] = (versionProps['VERSION_PATCH'].toInteger() + value).toString()
        versionProps['VERSION_NUMBER'] = (versionProps['VERSION_NUMBER'].toInteger() + value).toString()
        versionProps['VERSION_BUILD'] = (versionProps['VERSION_BUILD'].toInteger() + 1).toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        mVersionName = "v${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']} Build: ${versionProps['VERSION_BUILD']}"
        mApkFileName = "VersionAutoupdate_v${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}_b${versionProps['VERSION_BUILD']}"

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}