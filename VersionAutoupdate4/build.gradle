apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    def versionPropsFile = file('version.properties')
    def value = 0
    Properties versionProps = new Properties()
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_MAJOR'] = "1"
        versionProps['VERSION_MINOR'] = "0"
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_BUILD'] = "-1" // I set it to minus one so the first build is 0 which isn't super important.
        versionProps['VERSION_NUMBER'] = "1"
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    def runTasks = gradle.startParameter.taskNames
    if ('assembleRelease' in runTasks) {
        value = 1
    }

    def mVersionName = ""
    def mApkFileName = ""
    def formattedDate = new Date().format('dd-MM-yyyy-HH-mm')
    /*
    def versionMajor = 0
    def versionMinor = 0
    def versionPatch = 0
    def versionBuild = 0
    def versionNumber = 0
    */

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))

        versionProps['VERSION_PATCH'] = (versionProps['VERSION_PATCH'].toInteger() + value).toString()
        versionProps['VERSION_NUMBER'] = (versionProps['VERSION_NUMBER'].toInteger() + value).toString()
        versionProps['VERSION_BUILD'] = (versionProps['VERSION_BUILD'].toInteger() + 1).toString()

        versionProps.store(versionPropsFile.newWriter(), null)
        /*
        versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        versionMinor = versionProps['VERSION_MINOR'].toInteger()
        versionPatch = versionProps['VERSION_PATCH'].toInteger()
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
        versionNumber = versionProps['VERSION_NUMBER'].toInteger()
        */

        mVersionName = "v${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']} Build: ${versionProps['VERSION_BUILD']}"
        mApkFileName = "VersionAutoupdate_v${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}_b${versionProps['VERSION_BUILD']}"

        defaultConfig {
            applicationId "vinit.versionautoupdate4"
            minSdkVersion 23
            targetSdkVersion 29
            versionCode versionProps['VERSION_NUMBER'].toInteger()
            versionName mVersionName

//            archivesBaseName = "NAME_YOU_WANT" + versionName

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }
    /*
    defaultConfig {
        applicationId "vinit.versionautoupdate4"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    */

    signingConfigs {
        release {
            storeFile file('../VersionAutoupdate.jks')
            storePassword 'sample1'
            keyAlias 'SampleAlias'
            keyPassword 'sample2'
        }
    }

    buildTypes {
        debug{
//            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
//            buildConfigField "String", "APK_FILE_NAME", mApkFileName +"D_d(" + formattedDate + ").apk"
            buildConfigField "String", "APK_FILE_NAME", "\"${mApkFileName}D_d(${formattedDate}).apk\""
            /*
            applicationVariants.all { variant ->
                variant.outputs.all {

                    def newApkName = mApkFileName + "D_d(" + formattedDate + ").apk"

                    outputFileName = new File(newApkName)
                }
            }
            */
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "APK_FILE_NAME", "\"${mApkFileName}R_d(${formattedDate}).apk\""

            /*applicationVariants.all { variant ->
                variant.outputs.all {

                    def newApkName = mApkFileName + "R_d(" + formattedDate + ").apk"

                    outputFileName = new File(newApkName)
                }
            }*/
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            /*
            Source1:https://stackoverflow.com/questions/28249036/app-release-apk-how-to-change-this-default-generated-apk-name
            Source2:https://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
            Source3:https://stackoverflow.com/Questions/6758685/auto-increment-version-code-in-android-app
            Source4:https://codelabs.developers.google.com/advanced-android-training/
            Source5:https://codelabs.developers.google.com/android-training/
            def appId = variant.applicationId
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def flavorName = variant.flavorName // e. g. free
            def buildType = variant.buildType // e. g. debug
            def variantName = variant.name // e. g. freeDebug
            */
            def newApkName = ""
            if (variant.name == "debug"){
                newApkName = mApkFileName +"D_d(" + formattedDate + ").apk"
            } else if (variant.name == "release"){
                newApkName = mApkFileName + "R_d(" + formattedDate + ").apk"
            } else {
                newApkName = mApkFileName + variant.name + "_d(" + formattedDate + ").apk"
            }

            outputFileName = new File(newApkName)
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}
